/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.27
 * Generated at: 2019-12-08 13:55:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class policy_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/Users/Allianz3081/Allianz/WORKSPACE_JEE7_WEB/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/MotorInsurance_Final/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153365282000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1575813031428L));
    _jspx_dependants.put("jar:file:/C:/Users/Allianz3081/Allianz/WORKSPACE_JEE7_WEB/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/MotorInsurance_Final/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153365282000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\t\n");
      out.write("    \n");
      out.write("<link\n");
      out.write("\thref=\"//netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css\"\n");
      out.write("\trel=\"stylesheet\" id=\"bootstrap-css\">\n");
      out.write("<script\n");
      out.write("\tsrc=\"//netdna.bootstrapcdn.com/bootstrap/3.1.0/js/bootstrap.min.js\"></script>\n");
      out.write("<script src=\"//code.jquery.com/jquery-1.11.1.min.js\"></script>\n");
      out.write("<!------ Include the above in your HEAD tag ---------->\n");
      out.write("<style>\n");
      out.write(".filterable {\n");
      out.write("\tmargin-top: 15px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filterable .panel-heading .pull-right {\n");
      out.write("\tmargin-top: -20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filterable .filters input[disabled] {\n");
      out.write("\tbackground-color: transparent;\n");
      out.write("\tborder: none;\n");
      out.write("\tcursor: auto;\n");
      out.write("\tbox-shadow: none;\n");
      out.write("\tpadding: 0;\n");
      out.write("\theight: auto;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filterable .filters input[disabled]::-webkit-input-placeholder {\n");
      out.write("\tcolor: #333;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filterable .filters input[disabled]::-moz-placeholder {\n");
      out.write("\tcolor: #333;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".filterable .filters input[disabled]:-ms-input-placeholder {\n");
      out.write("\tcolor: #333;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("<script>\n");
      out.write("\t/*\n");
      out.write("\t Please consider that the JS part isn't production ready at all, I just code it to show the concept of merging filters and titles together !\n");
      out.write("\t */\n");
      out.write("\t$(document)\n");
      out.write("\t\t\t.ready(\n");
      out.write("\t\t\t\t\tfunction() {\n");
      out.write("\t\t\t\t\t\t$('.filterable .btn-filter')\n");
      out.write("\t\t\t\t\t\t\t\t.click(\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfunction() {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar $panel = $(this).parents(\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t'.filterable'), $filters = $panel\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.find('.filters input'), $tbody = $panel\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.find('.table tbody');\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif ($filters.prop('disabled') == true) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t$filters\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t.prop('disabled', false);\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t$filters.first().focus();\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t$filters.val('').prop(\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t'disabled', true);\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t$tbody.find('.no-result')\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t$tbody.find('tr').show();\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\t\t\t});\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t$('.filterable .filters input')\n");
      out.write("\t\t\t\t\t\t\t\t.keyup(\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfunction(e) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t/* Ignore tab key */\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar code = e.keyCode || e.which;\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (code == '9')\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\treturn;\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t/* Useful DOM data and selectors */\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar $input = $(this), inputContent = $input\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.val().toLowerCase(), $panel = $input\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.parents('.filterable'), column = $panel\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.find('.filters th')\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.index($input.parents('th')), $table = $panel\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.find('.table'), $rows = $table\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.find('tbody tr');\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t/* Dirtiest filter function ever ;) */\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar $filteredRows = $rows\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.filter(function() {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar value = $(this)\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.find('td').eq(\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumn)\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.text()\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.toLowerCase();\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn value\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.indexOf(inputContent) === -1;\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t});\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t/* Clean previous no-result if exist */\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t$table.find('tbody .no-result')\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.remove();\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t/* Show all rows, hide filtered ones (never do that outside of a demo ! xD) */\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t$rows.show();\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t$filteredRows.hide();\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t/* Prepend no-result row if all rows are filtered */\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif ($filteredRows.length === $rows.length) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t$table\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t.find('tbody')\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t.prepend(\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$('<tr class=\"no-result text-center\"><td colspan=\"'\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ $table\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.find('.filters th').length\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ '\">No result found</td></tr>'));\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\t\t\t});\n");
      out.write("\t\t\t\t\t});\n");
      out.write("</script>\n");
      out.write("<div class=\"container\">\n");
      out.write("\t<h3>Your Policies are Listed Below With Policy Numbers</h3>\n");
      out.write("\t<hr>\n");
      out.write("\t\n");
      out.write("\t<div class=\"row\">\n");
      out.write("\t\t<div class=\"panel panel-primary filterable\">\n");
      out.write("\t\t\t<div class=\"panel-heading\">\n");
      out.write("\t\t\t\t<h3 class=\"panel-title\">Users</h3>\n");
      out.write("\t\t\t\t<div class=\"pull-right\">\n");
      out.write("\t\t\t\t\t<button class=\"btn btn-default btn-xs btn-filter\">\n");
      out.write("\t\t\t\t\t\t<span class=\"glyphicon glyphicon-filter\"></span> Filter\n");
      out.write("\t\t\t\t\t</button>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t<table class=\"table\">\n");
      out.write("\t\t\t\t<thead>\n");
      out.write("\t\t\t\t\t<tr class=\"filters\">\n");
      out.write("\t\t\t\t\t\t<th><input type=\"text\" class=\"form-control\"\n");
      out.write("\t\t\t\t\t\t\tplaceholder=\"Policy Id\" disabled></th>\n");
      out.write("\t\t\t\t\t</tr>\n");
      out.write("\t\t\t\t</thead>\n");
      out.write("\t\t\t\t<tbody>\n");
      out.write("\t\t\t\t\t");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\t\t\t\t</tbody>\n");
      out.write("\t\t\t</table>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /policy.jsp(136,5) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/policy.jsp(136,5) '${policyList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${policyList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /policy.jsp(136,5) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("policy");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("\t\t\t\t\t\t<tr>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.policyNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.policyType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.policyStartDate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.policyEndDate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.sumInsured}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.premiumAmount}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.vehicle.vehicleNumber}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.vehicle.vehicleType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.vehicle.manufacturer}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.vehicle.vehicleModel}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.vehicle.engineCC}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.vehicle.fuelType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.vehicle.passingYear}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ policy.vehicle.vehicleColour}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("\t\t\t\t\t\t</tr>\n");
            out.write("\t\t\t\t\t");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
